// <auto-generated />
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace MarketDataProvider.Migrations
{
    [DbContext(typeof(MarketDataContext))]
    partial class MarketDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("DataLayer.Models.Currency", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DataLayer.Models.Exchange", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<bool>("ProvidesFullHistoryData");

                    b.Property<string>("Web");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("DataLayer.Models.ExchangeCurrency", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyExchangeId");

                    b.Property<string>("CurrencyId")
                        .IsRequired();

                    b.Property<string>("ExchangeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("ExchangeId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeCurrencies");
                });

            modelBuilder.Entity("DataLayer.Models.ExchangeMarket", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExchangeId")
                        .IsRequired();

                    b.Property<string>("MarketExchangeId");

                    b.Property<string>("MarketId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("ExchangeId", "MarketId");

                    b.HasIndex("MarketId");

                    b.ToTable("ExchangeMarkets");
                });

            modelBuilder.Entity("DataLayer.Models.Market", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyId");

                    b.Property<string>("MarketCurrencyId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MarketCurrencyId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("DataLayer.Models.ExchangeCurrency", b =>
                {
                    b.HasOne("DataLayer.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Exchange", "Exchange")
                        .WithMany("ExchangeCurrencies")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.ExchangeMarket", b =>
                {
                    b.HasOne("DataLayer.Models.Exchange", "Exchange")
                        .WithMany("ExchangeMarkets")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Market", b =>
                {
                    b.HasOne("DataLayer.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataLayer.Models.Currency", "MarketCurrency")
                        .WithMany()
                        .HasForeignKey("MarketCurrencyId");
                });
#pragma warning restore 612, 618
        }
    }
}
